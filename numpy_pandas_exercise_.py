# -*- coding: utf-8 -*-
"""Numpy_Pandas Exercise .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VjRbfZ3eN57VHYdlqXZA2VlzkaPj2Duu

Numpy
"""

import numpy as np #np is an alias of numpy

my_list=[2,3,7,9,8]

type(my_list)

#converting a list into an array
arr=np.array(my_list)

print(arr)

type(arr) #n dimentional array - 1 dimentional array

arr.shape

#2 dimentional array - multinested array
my_list_1=[2,3,7,9,8]
my_list_2=[2,3,4,1,7]
my_list_3=[9,8,0,4,5]

arr_new=np.array([my_list_1,my_list_2,my_list_3])

print(arr_new)

arr_new.shape #3 rows and 5 columns

arr_new.reshape(5,3) #transpose of a matrix (converting rows into columns and columns into rows)

arr_new.reshape(3,5)

"""q. create a numpy matrix of shape (2,4)"""

my_list_2=[2,3,4,1]
my_list_3=[9,8,0,4]

new_arr=np.array([my_list_2,my_list_3])

new_arr

new_arr.reshape(4,2)

"""Numerical analysis

"""

a=np.array([2,3,5,6,8])
print("adding 1 to each number from the list",a+1)

print("subtract 1 from each number from the list",a-1)

print("multiply 5 to each element from the list",a*5)

print("square of each element from the list",a**2)

"""Generating random numbers"""

np.arange(1,20,1) #from 1 to 20 we will get equally spaced numbers (step size is 1)

np.arange(1,20,3) #each number will have an equal difference of 3

np.linspace(1,10,50) #here 50 is the number of elements we need between 1 to 10 (here 10 is not exclusive)

np.linspace(1,10,100)

#generating a random float number between 0 and 1 (here 1 will be exclusive)
num=np.random.rand()

print(num)

int_num=np.random.randint(0,10)
print(int_num)

np.random.rand(3,4) #here 3 means number of rows and 4 means the number of columns

"""Pandas"""

import pandas as pd #pd is the alias of pandas

data=pd.read_csv("/content/tips.csv")

data.head() #head() will display the first 5 rows of the dataset

data.head(15) #this time we will be able to look at first 15 rows

data.tail() # tail() will display the last 5 rows

data.tail(10)

data.info() #info() helps in doing basic analysis

#pd.read_excel("copy path")

data.describe() #describe() helps in doing statistical analysis

my_data=pd.DataFrame(np.arange(0,20).reshape(5,4),index=['row0','row1','row2','row3','row4'],columns=['col0','col1','col2','col3'])

print(my_data)

my_data.iloc[2:4,0:3]

my_data.iloc[2:4,2:]

